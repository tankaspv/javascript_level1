// Первое - Почему код даёт именно такие результаты?

var a = 1, b = 1, c, d;

c = ++a; alert(c); // 2 - Тут префиксная форма инкрементирования, а значит сначала увеличивается значение, а потом происходит возврат уже увеличенного.

d = b++; alert(d); // 1 - Тут постфиксная форма инкрементирования, сначала возвращается значение, а потом уже происходит само увеличение.

c = (2+ ++a); alert(c); // 5 - У инкрементирования приоритет выше, поэтому сначала увеличивается значение переменной a (становится равным 3), а потом уже происходит сложение.

d = (2+ b++); alert(d); // 4 - У b тут постфиксная инкрементация, а значит значение самой переменной мы увеличим, но использовать в данном случае его не будем и к 2 прибавим то, что до икрементации хранилось в b (2).

alert(a); // 3 - В процессе выполнения кода мы дважды инкрементировали значение переменной а относительно первоначального. Она стала равной 3.

alert(b); // 3 - В процессе выполнения кода мы дважды инкрементировали значение переменной b относительно первоначального. В b теперь хранится 3.


// Второе - Чему будет равен x в примере ниже?

var f = 2;
var x = 1 + (f *= 2); // f = 4, т.к. это присваивание с умножением.
alert(x); // x = 5


// Третье:
// Объявить две целочисленные переменные a и b и задать им произвольные начальные значения. Затем написать скрипт, который работает по следующему принципу:
// * если a и b положительные, вывести их разность;
// * если а и b отрицательные, вывести их произведение;
// * если а и b разных знаков, вывести их сумму;
// ноль можно считать положительным числом.

var p, q;

p = 0;
q = -10;

if (p >= 0 && q >= 0) {
    alert("p - q = " + (p - q));
} else if (p < 0 && q < 0) {
    alert("p * q = " + (p * q));
} else {
    alert("p + q = " + (p + q));
};

// Четвертое: Присвоить переменной а значение в промежутке [0..15]. С помощью оператора switch организовать вывод чисел от a до 15.

var i = 11;

switch (i) {
    case 0:
    alert("i = 0");
    case 1:
    alert("i = 1");
    case 2:
    alert("i = 2");
    case 3:
    alert("i = 3");
    case 4:
    alert("i = 4");
    case 5:
    alert("i = 5");
    case 6:
    alert("i = 6");
    case 7:
    alert("i = 7");
    case 8:
    alert("i = 8");
    case 9:
    alert("i = 9");
    case 10:
    alert("i = 10");
    case 11:
    alert("i = 11");
    case 12:
    alert("i = 12");
    case 13:
    alert("i = 13");
    case 14:
    alert("i = 14");
    case 15:
    alert("i = 15");
};

// Пятое -  Реализовать основные 4 арифметические операции в виде функций с двумя параметрами. Обязательно использовать оператор return.

var sum, sub, mult, del;

function addition(y,z){
    return (y + z);
};

function subtraction(y,z){
    return (y - z);
};

function multiplication(y,z){
    return (y * z);
};

function division(y,z){
    return (y / z);
};

sum = addition(10, 5);
alert("Сумма = " + sum);

sub= subtraction(10, 5);
alert("Разница = " + sub);

mult = multiplication(10, 5);
alert("Умножение = " + mult);

del = division(10, 5);
alert("Деление = " + del);

// Шестое: 
//Реализовать функцию с тремя параметрами: function mathOperation(arg1, arg2, operation), 
//где arg1, arg2 – значения аргументов, operation – строка с названием операции.
//В зависимости от переданного значения операции выполнить одну из арифметических операций (использовать функции из пункта 3) и вернуть полученное значение (использовать switch).


var arg1 = 10, arg2 = 5, operation = 'division';
alert("Результат = " + mathOperation(arg1, arg2, operation));

function mathOperation(arg1, arg2, operation) {
    switch (operation){
        case 'addition':
            return(addition(arg1, arg2));
            break;
        case 'subtraction':
            return(subtraction(arg1, arg2));
            break;
        case 'multiplication':
            return(multiplication(arg1, arg2));
            break;
        case 'division':
            return(division(arg1, arg2));
            break;
    }
};